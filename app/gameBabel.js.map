{"version":3,"sources":["../app-src/gameBabel.js"],"names":["a","aa","ab","c","num","num2","toFixed","n1","n2","n3","nome","sNome","completo","ligado","lista","lista2","i","document","write","length"],"mappings":";;AAAA;;AAEA;;;;;;;;;;;;;AAaC,IAAIA,CAAC,GAAG,CAAR;AACA;;AACA,IAAIC,EAAE,GAAG,GAAT;AACA;AACI,MAAIC,EAAE,GAAG,GAAT,CADJ,CACiB;AAChB,C,CACF;AACA;;AAEC;AACD;AACA;;AAEA;;;;;AAKA;AACA;;AAEA;;;;;;;AAMC,IAAMC,CAAC,GAAG,CAAV,C,CACD;;AAEA;;;;;AAIC,IAAIC,GAAG,GAAG,QAAV;AACA,IAAIC,IAAI,GAAGD,GAAG,CAACE,OAAJ,CAAY,CAAZ,CAAX,C,CAA0B;AAC3B;;AAEC,IAAIC,EAAE,GAAG,CAAT;AACA,IAAIC,EAAE,GAAG,GAAT;AACA,IAAIC,EAAE,GAAG,IAAT,C,CACD;AACA;AACA;AACA;AACA;AACA;;AAGA;;;;;AAKA;AACA;;AACC,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,KAAK,GAAG,QAAZ;AACA,IAAIC,QAAQ,GAAGF,IAAI,GAAGC,KAAtB,C,CACD;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;AAQC,IAAIE,MAAM,GAAG,IAAb,C,CACD;;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;;;;AAIC,IAAIC,KAAK,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,CAAZ,C,CACD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGC;;;;;;AAKA,IAAIC,MAAM,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,EAA4B,OAA5B,EAAqC,OAArC,EAA8C,OAA9C,EAAuD,UAAvD,EAAmE,UAAnE,EAA+E,KAA/E,CAAb;AAEA,IAAIC,CAAC,GAAG,CAAR;;AACA,OAAOA,CAAC,IAAI,EAAZ,EAAgB;AACbC,EAAAA,QAAQ,CAACC,KAAT,CAAeF,CAAC,GAAG,MAAnB;AACAA,EAAAA,CAAC,IAAE,CAAH;AACF;;AAED,KAAK,IAAIA,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGD,MAAM,CAACI,MAA3B,EAAmCH,EAAC,EAApC,EAAwC;AACpCC,EAAAA,QAAQ,CAACC,KAAT,CAAeH,MAAM,CAACC,EAAD,CAAN,GAAY,MAA3B;AACH","sourcesContent":["// document.write(\"Fui compilado pelo Babel 7 \")\r\n\r\n/**\r\n * Variáveis\r\n * Você usa variáveis como nomes simbólicos para os valores em sua aplicação.\r\n * \r\n * Tipos de dados:\r\n * Boolean. true e false.\r\n * null. Uma palavra-chave que indica valor nulo.\r\n * undefined. Uma propriedade superior cujo valor é indefinido.\r\n * Number. 42 ou 3.14159.\r\n * String. \"Howdy\"\r\n * Symbol (novo em ECMAScript 6). Um tipo de dado cuja as instâncias são únicas e imutáveis.\r\n * Object. Objetos\r\n */\r\n var a = 1\r\n /** let - permite que você declare variáveis limitando seu escopo no bloco*/\r\n let aa = \"1\"\r\n {\r\n     let ab = \"2\" // ela respeita o escopo, só podendo ser acessada aqui dentro\r\n }\r\n//  document.write(aa)\r\n//  document.write(ab) // Uncaught ReferenceError: ab is not defined\r\n\r\n /** Convertendo strings para números */\r\n//  document.write(parseInt(aa))\r\n//  document.write(parseFloat(aa))\r\n\r\n/**\r\n * Hoisting (lançada para o topo)\r\n * É quando você utiliza a variável e declara depois, sem obter uma exceção.\r\n * Elas retornarão um valor undefined.\r\n */\r\n//  document.write(b)\r\n//  var b = 1\r\n\r\n/**\r\n * Constantes\r\n * Uma constante não pode alterar seu valor por meio de uma atribuição ou \r\n * ao ser declarada novamente enquanto o script é executado. \r\n * Deve ser inicializada com um valor.\r\n */\r\n const c = 1\r\n//  c = 2 // Erro de sintaxe, e c é somente leitura\r\n\r\n/**\r\n * Números\r\n * O objeto JavaScript Number é um objeto encapsulado que permite você trabalhar com valores numéricos.\r\n */\r\n let num = 1.123123\r\n let num2 = num.toFixed(2) // Retorna uma string representando o número na notação de ponto fixo.\r\n//  document.write(num2) \r\n\r\n let n1 = 2\r\n let n2 = '3'\r\n let n3 = 'ab'\r\n//  document.write(n1/n2) // Aqui o js faz a conversão inplicitamente\r\n//  document.write(n1+n2) // Aqui o js faz a concatenação de strings \r\n//  document.write(n1*n3) // Aqui o returna NaN\r\n//  document.write(n1 * Number(n2)) // Aqui convertemos a string para número\r\n//  document.write(n1 * +n2) // Aqui convertemos a string para número positivo\r\n//  document.write(n1 * -n2) // Aqui convertemos a string para número positivo\r\n\r\n\r\n/**\r\n * Strings\r\n * Strings são úteis para guardar dados que podem ser representados em forma de texto.\r\n * \r\n */\r\n//  let nome = 'Felipe \"Ok\"' // para imprimir as aspas no body\r\n//  let nome = 'Felipe \\\"Ok\\\" ' // para imprimir as aspas no body\r\n let nome = 'Luiz'\r\n let sNome = 'Felipe'\r\n let completo = nome + sNome\r\n//  document.write(nome + ' ' + sNome + ' Possui tamaho: ' + completo.length + '<br>') // retorna o tamanho da string\r\n//  document.write(completo.charAt(2) + '<br>') // Retorna o caracter da posição passada\r\n//  document.write(completo.substring(0, 3) + '<br>') // Retorna um trecho dessa string\r\n//  document.write(completo.toLowerCase() + '<br>') // Retorna a string em minúscula\r\n//  document.write(completo.toUpperCase() + '<br>') // Retorna a string em minúscula\r\n \r\n/**\r\n * Boolean\r\n * true ou false\r\n * \r\n * Se o valor é omitido ou é 0, -0, null, false, NaN, undefined \"\", \r\n * o objeto terá um valor inicial de false.\r\n * \r\n */\r\n let ligado = true\r\n//  document.write(ligado)\r\n \r\n/**\r\n * Operadores\r\n * \r\n * Aritméticos: +  -  *  /\r\n * Comparação: >  <  >=  <=\r\n * Igualdade: ==   ===(estritamente igual)  !=   !==(estritamente diferente)\r\n * Lógicos: &&  ||  !\r\n * Ternário: (expressao) ? se_true : se_false\r\n */\r\n//  document.write(`Aritméticos:  ${5 + 1}, ${5 - 1}, ${5 * 1}, ${10 / 2}; <br>\r\n//                 Comparação:  ${5 > 1}, ${5 < 1}, ${5 >= 1}, ${10 <= 2}; <br>\r\n//                 Igualdade:  ${10 == 10}, ${10 === '10'}, ${5 != 10}, ${10 != '10'}, ${10 !== '10'}; <br>\r\n//                 Lógicos:  ${5 > 1 && 5 < 10}, ${5 > 10 || 5 < 10}, ${!5 >= 1}; <br>\r\n//                 Ternário:  ${5 < 1 ? \"Maior\": \"Menor\"}; <br>\r\n//                 ` \r\n//  )\r\n\r\n\r\n/**\r\n * Array\r\n * Semelhante a listas\r\n */\r\n let lista = ['leite', 'água', 'banana']\r\n//  lista[3] = 'farofa'\r\n//  document.write(lista.length) // Retorna o tamanho do array\r\n//  document.write(lista[1]) // Acessa o elemento do índice passado\r\n\r\n// lista.pop() // Retira o ultimo elemento do array\r\n// lista.shift() // Retira o primeiro elemento do array\r\n// lista.unshift('pedra') // Adiciona um elemento no início do array\r\n// lista.push('pedra') // Adiciona um elemento no final do array\r\n// lista.splice(1, 2) // Retira o elemento a partir do indice e a quantidade de elementos após ele\r\n//  document.write(lista) // Retorna o array\r\n\r\n\r\n /**\r\n  * Loops\r\n  * São laços de condição, que serão executados até que a operação seja atendida\r\n  * \r\n  */\r\n let lista2 = ['leite', 'água', 'banana', 'carne', 'arroz', 'fejão', 'mostarda', 'macarrão', 'pão']\r\n\r\n let i = 0\r\n while (i <= 10) {\r\n    document.write(i + '<br>')\r\n    i+=1\r\n }\r\n\r\n for (let i = 0; i < lista2.length; i++) {\r\n     document.write(lista2[i] + '<br>')\r\n }"],"file":"gameBabel.js"}